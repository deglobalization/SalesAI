// Ìñ•ÏÉÅÎêú AI Í≥†Í∞ù ÏÑ∏Î∂ÑÌôî Î∞è ÏΩîÎ©òÌä∏ ÏÉùÏÑ± ÏãúÏä§ÌÖú
class EnhancedAISegmentation {
    constructor() {
        this.customerProfiles = new Map();
        this.segmentationCriteria = {
            sales: {
                premium: 100000000,   // 1Ïñµ Ïù¥ÏÉÅ
                high: 50000000,       // 5Ï≤úÎßå Ïù¥ÏÉÅ
                medium: 10000000,     // 1Ï≤úÎßå Ïù¥ÏÉÅ
                low: 0                // Í∑∏ ÎØ∏Îßå
            },
            bcg: {
                marketShare: { high: 3.0 },
                relativeMarketShare: { high: 0.5 },
                marketGrowth: { high: 20, low: 0 },
                halfYearGrowth: { high: 10 }
            },
            lifecycle: {
                introduction: { salesThreshold: 10000000, growthRate: 30 },
                growth: { salesThreshold: 10000000, growthRate: 15, yearGrowth: 10 },
                maturity: { salesThreshold: 50000000, growthRange: 10, stability: 0.8 },
                decline: { growthRate: -10, yearGrowth: -5 },
                revival: { monthlyGrowth: 10 }
            }
        };
        this.aiPatterns = this.initializeAIPatterns();
    }

    // AI Ìå®ÌÑ¥ Îß§Ïπ≠ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî
    initializeAIPatterns() {
        return [
            // üåü Í≥†ÏÑ±Ïû• Ìå®ÌÑ¥
            {
                id: 'explosive_growth',
                condition: (profile) => profile.growth3MonthRate > 50 && profile.growthYearAgoRate > 30,
                lifecycle: ['introduction', 'growth'],
                comment: (profile) => `üöÄ Ìè≠Î∞úÏ†Å ÏÑ±Ïû•ÏÑ∏, Ï†ÑÎûµÏ†Å ÌååÌä∏ÎÑàÏã≠ Ïö∞ÏÑ† Í≤ÄÌÜ† [Ïû†Ïû¨Î†•: ${this.calculatePotentialScore(profile)}Ï†ê]`,
                priority: 'critical',
                timeHorizon: 'immediate'
            },
            
            // üíé ÌîÑÎ¶¨ÎØ∏ÏóÑ Í≥†Í∞ù Ìå®ÌÑ¥
            {
                id: 'premium_customer',
                condition: (profile) => profile.recentSales >= 100000000 && profile.growth3MonthRate > 10,
                lifecycle: ['maturity', 'growth'],
                comment: (profile) => `üíé ÌîÑÎ¶¨ÎØ∏ÏóÑ ÌïµÏã¨Í≥†Í∞ù, VIP ÏÑúÎπÑÏä§ Í∞ïÌôî Î∞è Ïû•Í∏∞ Í∞ÄÏπò Í∑πÎåÄÌôî`,
                priority: 'high',
                timeHorizon: 'long_term'
            },
            
            // üîÑ ÌöåÎ≥µÏÑ∏ Ìå®ÌÑ¥
            {
                id: 'recovery_trend',
                condition: (profile) => profile.growth3Month > 0 && profile.growthYearAgo < 0 && profile.growth3MonthRate > 20,
                lifecycle: ['revival'],
                comment: (profile) => `üîÑ ÌöåÎ≥µÏÑ∏ Í∞ïÌôî Ï§ë, Ï∂îÍ∞Ä Ìà¨Ïûê Í∏∞Ìöå Ìè¨Ï∞© Î∞è Î™®Î©òÌÖÄ Ïú†ÏßÄ`,
                priority: 'medium',
                timeHorizon: 'medium_term'
            },
            
            // ‚ö†Ô∏è ÏúÑÌóò Í≥†Í∞ù Ìå®ÌÑ¥
            {
                id: 'high_risk',
                condition: (profile) => profile.growth3MonthRate < -20 && profile.growthYearAgoRate < -15,
                lifecycle: ['decline'],
                comment: (profile) => `üö® Í≥†ÏúÑÌóò Í≥†Í∞ù, Í∏¥Í∏â Í¥ÄÍ≥Ñ Î≥µÍµ¨ Î∞è ÏÜêÏã§ ÏµúÏÜåÌôî Ï†ÑÎûµ`,
                priority: 'critical',
                timeHorizon: 'immediate'
            },
            
            // üå± ÏÑ±Ïû• Ïû†Ïû¨Î†• Ìå®ÌÑ¥
            {
                id: 'growth_potential',
                condition: (profile) => profile.recentSales < 50000000 && profile.growth3MonthRate > 30,
                lifecycle: ['introduction', 'growth'],
                comment: (profile) => `üå± ÏÑ±Ïû• Ïû†Ïû¨Î†• Ïö∞Ïàò, ÎßûÏ∂§Ìòï ÌôïÏû• ÏßÄÏõê Î∞è ÏßëÏ§ë Ìà¨Ïûê`,
                priority: 'medium',
                timeHorizon: 'short_term'
            },
            
            // ü§ù ÏïàÏ†ïÏ†Å ÌååÌä∏ÎÑà Ìå®ÌÑ¥
            {
                id: 'stable_partner',
                condition: (profile) => profile.recentSales >= 50000000 && Math.abs(profile.growth3MonthRate) < 10,
                lifecycle: ['maturity', 'stable'],
                comment: (profile) => `ü§ù Ïã†Î¢∞Ìï† Ïàò ÏûàÎäî ÌååÌä∏ÎÑà, Ïû•Í∏∞ Í¥ÄÍ≥Ñ Ïú†ÏßÄ Î∞è Ìö®Ïú®ÏÑ± Í∑πÎåÄÌôî`,
                priority: 'low',
                timeHorizon: 'long_term'
            },
            
            // üîß ÎîîÏßÄÌÑ∏ Ï†ÑÌôò ÌõÑÎ≥¥ Ìå®ÌÑ¥
            {
                id: 'digital_candidate',
                condition: (profile) => profile.recentSales >= 30000000 && Math.abs(profile.growth3MonthRate) < 5 && profile.uniqueProducts >= 3,
                lifecycle: ['maturity', 'stable'],
                comment: (profile) => `üîß ÎîîÏßÄÌÑ∏ ÏÜîÎ£®ÏÖò ÌõÑÎ≥¥, ÌòÅÏã†Ï†Å ÏÑúÎπÑÏä§ Ï†úÏïà Í∏∞Ìöå`,
                priority: 'medium',
                timeHorizon: 'medium_term'
            }
        ];
    }

    // Ï¢ÖÌï© Í≥†Í∞ù ÌîÑÎ°úÌïÑ ÏÉùÏÑ±
    createCustomerProfile(customer) {
        const profile = {
            // Í∏∞Î≥∏ Ï†ïÎ≥¥
            accountCode: customer.accountCode,
            accountName: customer.accountName,
            region: customer.region,
            manager: customer.manager,
            
            // Îß§Ï∂ú ÏßÄÌëú
            recentSales: customer.recentMonthSales || 0,
            totalSales: customer.totalSales || 0,
            growth3Month: customer.growthVs3Month || 0,
            growthYearAgo: customer.growthVsYearAgo || 0,
            uniqueProducts: customer.uniqueProducts || 0,
            annualSales: customer.annualSales || 0,
            
            // Í≥ÑÏÇ∞Îêú ÏßÄÌëú
            growth3MonthRate: this.calculateGrowthRate(customer.growthVs3Month, customer.recentMonthSales),
            growthYearAgoRate: this.calculateGrowthRate(customer.growthVsYearAgo, customer.recentMonthSales),
            salesStability: this.calculateSalesStability(customer),
            marketShare: this.calculateMarketShare(customer),
            
            // ÏÑ∏Î∂ÑÌôî Í≤∞Í≥º
            salesSegment: this.determineSalesSegment(customer.recentMonthSales),
            bcgSegment: this.determineBCGSegment(customer),
            lifecycleStage: this.determineLifecycleStage(customer),
            
            // AI Î∂ÑÏÑù Í≤∞Í≥º
            aiPatterns: [],
            riskLevel: 'low',
            potentialScore: 0,
            recommendedActions: []
        };
        
        // AI Ìå®ÌÑ¥ Îß§Ïπ≠ Ïã§Ìñâ
        profile.aiPatterns = this.matchAIPatterns(profile);
        profile.potentialScore = this.calculatePotentialScore(profile);
        profile.riskLevel = this.assessRiskLevel(profile);
        profile.recommendedActions = this.generateRecommendedActions(profile);
        
        this.customerProfiles.set(customer.accountCode, profile);
        return profile;
    }

    // ÏÑ±Ïû•Î•† Í≥ÑÏÇ∞
    calculateGrowthRate(growth, currentSales) {
        return currentSales > 0 ? (growth / currentSales) * 100 : 0;
    }

    // Îß§Ï∂ú ÏïàÏ†ïÏÑ± Í≥ÑÏÇ∞
    calculateSalesStability(customer) {
        const totalSales = customer.totalSales || 0;
        const recentSales = customer.recentMonthSales || 0;
        return totalSales > 0 ? (recentSales * 12) / totalSales : 0;
    }

    // ÏãúÏû• Ï†êÏú†Ïú® Í≥ÑÏÇ∞
    calculateMarketShare(customer) {
        // Ï†ÑÏ≤¥ Í≥†Í∞ù ÎåÄÎπÑ ÏÉÅÎåÄÏ†Å Ï†êÏú†Ïú® Í≥ÑÏÇ∞ (Ï∂îÌõÑ Íµ¨ÌòÑ)
        return 0;
    }

    // Îß§Ï∂úÏï° Í∏∞Ï§Ä ÏÑ∏Î∂ÑÌôî
    determineSalesSegment(recentSales) {
        const criteria = this.segmentationCriteria.sales;
        if (recentSales >= criteria.premium) return 'premium';
        if (recentSales >= criteria.high) return 'high';
        if (recentSales >= criteria.medium) return 'medium';
        return 'low';
    }

    // BCG Matrix ÏÑ∏Î∂ÑÌôî
    determineBCGSegment(customer) {
        const recentSales = customer.recentMonthSales || 0;
        const yearGrowthRate = customer.yearOverYearGrowthRate || 0;
        const halfYearGrowthRate = customer.halfYearGrowthRate || 0;
        
        const avgGrowthRate = (yearGrowthRate + halfYearGrowthRate) / 2;
        const isHighGrowth = avgGrowthRate > this.segmentationCriteria.bcg.marketGrowth.high;
        const isHighShare = recentSales >= 50000000; // ÏûÑÏãú Í∏∞Ï§Ä
        
        if (isHighGrowth && isHighShare) return 'star';
        if (!isHighGrowth && isHighShare) return 'cash-cow';
        if (isHighGrowth && !isHighShare) return 'question-mark';
        return 'dog';
    }

    // ÏÉùÏï†Ï£ºÍ∏∞ Îã®Í≥Ñ Í≤∞Ï†ï
    determineLifecycleStage(customer) {
        const recentSales = customer.recentMonthSales || 0;
        const growth3Month = customer.growthVs3Month || 0;
        const growthYearAgo = customer.growthVsYearAgo || 0;
        const totalSales = customer.totalSales || 0;
        
        const growth3MonthRate = this.calculateGrowthRate(growth3Month, recentSales);
        const growthYearAgoRate = this.calculateGrowthRate(growthYearAgo, recentSales);
        const salesStability = this.calculateSalesStability(customer);
        
        const criteria = this.segmentationCriteria.lifecycle;
        
        // ÎèÑÏûÖÍ∏∞
        if (recentSales < criteria.introduction.salesThreshold && growth3MonthRate > criteria.introduction.growthRate) {
            return 'introduction';
        }
        
        // ÏÑ±Ïû•Í∏∞
        if (growth3MonthRate > criteria.growth.growthRate && 
            growthYearAgoRate > criteria.growth.yearGrowth && 
            recentSales >= criteria.growth.salesThreshold) {
            return 'growth';
        }
        
        // ÏÑ±ÏàôÍ∏∞
        if (recentSales >= criteria.maturity.salesThreshold && 
            Math.abs(growth3MonthRate) < criteria.maturity.growthRange && 
            salesStability > criteria.maturity.stability) {
            return 'maturity';
        }
        
        // Ïá†Ìá¥Í∏∞
        if (growth3MonthRate < criteria.decline.growthRate && growthYearAgoRate < criteria.decline.yearGrowth) {
            return 'decline';
        }
        
        // Ïû¨ÌôúÏÑ±ÌôîÍ∏∞
        if (growth3Month > 0 && growthYearAgo <= 0 && growth3MonthRate > criteria.revival.monthlyGrowth) {
            return 'revival';
        }
        
        // ÏïàÏ†ïÍ∏∞ (Í∏∞Î≥∏)
        return 'stable';
    }

    // AI Ìå®ÌÑ¥ Îß§Ïπ≠
    matchAIPatterns(profile) {
        return this.aiPatterns.filter(pattern => {
            try {
                return pattern.condition(profile) && 
                       pattern.lifecycle.includes(profile.lifecycleStage);
            } catch (error) {
                console.warn('Ìå®ÌÑ¥ Îß§Ïπ≠ Ïò§Î•ò:', pattern.id, error);
                return false;
            }
        });
    }

    // Ïû†Ïû¨Î†• Ï†êÏàò Í≥ÑÏÇ∞
    calculatePotentialScore(profile) {
        let score = 0;
        
        // ÏÉùÏï†Ï£ºÍ∏∞ Îã®Í≥ÑÎ≥Ñ Í∏∞Î≥∏ Ï†êÏàò
        const lifecycleScores = {
            introduction: 40, growth: 35, revival: 30,
            stable: 20, maturity: 15, decline: 10
        };
        score += lifecycleScores[profile.lifecycleStage] || 0;
        
        // ÏÑ±Ïû•Î•† Î≥¥Ï†ï
        if (profile.growth3MonthRate > 30) score += 25;
        else if (profile.growth3MonthRate > 15) score += 15;
        else if (profile.growth3MonthRate > 5) score += 10;
        else if (profile.growth3MonthRate < -10) score -= 15;
        
        // Îß§Ï∂ú Í∑úÎ™® Î≥¥Ï†ï
        if (profile.recentSales >= 100000000) score += 20;
        else if (profile.recentSales >= 50000000) score += 15;
        else if (profile.recentSales >= 10000000) score += 10;
        
        // Ï†úÌíà Îã§ÏñëÏÑ± Î≥¥Ï†ï
        if (profile.uniqueProducts >= 5) score += 10;
        else if (profile.uniqueProducts >= 3) score += 5;
        
        // AI Ìå®ÌÑ¥ Î≥¥Ï†ï
        score += profile.aiPatterns.length * 5;
        
        return Math.max(0, Math.min(100, score));
    }

    // ÏúÑÌóòÎèÑ ÌèâÍ∞Ä
    assessRiskLevel(profile) {
        if (profile.growth3MonthRate < -20 || profile.growthYearAgoRate < -15) {
            return 'high';
        }
        if (profile.growth3MonthRate < -5 || profile.lifecycleStage === 'decline') {
            return 'medium';
        }
        return 'low';
    }

    // Ï∂îÏ≤ú Ïï°ÏÖò ÏÉùÏÑ±
    generateRecommendedActions(profile) {
        const actions = [];
        
        // AI Ìå®ÌÑ¥ Í∏∞Î∞ò Ïï°ÏÖò
        profile.aiPatterns.forEach(pattern => {
            actions.push({
                type: 'pattern_based',
                priority: pattern.priority,
                timeHorizon: pattern.timeHorizon,
                description: pattern.comment(profile),
                category: pattern.id
            });
        });
        
        // ÏúÑÌóòÎèÑ Í∏∞Î∞ò Ïï°ÏÖò
        if (profile.riskLevel === 'high') {
            actions.push({
                type: 'risk_mitigation',
                priority: 'critical',
                timeHorizon: 'immediate',
                description: 'Í∏¥Í∏â Í¥ÄÍ≥Ñ Î≥µÍµ¨ ÌîÑÎ°úÍ∑∏Îû® Ïã§Ìñâ',
                category: 'risk_management'
            });
        }
        
        // ÏÑ∏Í∑∏Î®ºÌä∏ Í∏∞Î∞ò Ïï°ÏÖò
        const segmentActions = this.getSegmentSpecificActions(profile);
        actions.push(...segmentActions);
        
        return actions.sort((a, b) => {
            const priorityOrder = { critical: 3, high: 2, medium: 1, low: 0 };
            return priorityOrder[b.priority] - priorityOrder[a.priority];
        });
    }

    // ÏÑ∏Í∑∏Î®ºÌä∏Î≥Ñ ÌäπÌôî Ïï°ÏÖò
    getSegmentSpecificActions(profile) {
        const actions = [];
        
        // BCG ÏÑ∏Í∑∏Î®ºÌä∏Î≥Ñ Ïï°ÏÖò
        switch (profile.bcgSegment) {
            case 'star':
                actions.push({
                    type: 'bcg_strategy',
                    priority: 'high',
                    timeHorizon: 'long_term',
                    description: '‚≠ê Ïä§ÌÉÄ Í≥†Í∞ù Ìà¨Ïûê ÌôïÎåÄ Î∞è ÏãúÏû• Î¶¨ÎçîÏã≠ Í∞ïÌôî',
                    category: 'investment_expansion'
                });
                break;
            case 'cash-cow':
                actions.push({
                    type: 'bcg_strategy',
                    priority: 'medium',
                    timeHorizon: 'long_term',
                    description: 'üêÑ ÌòÑÍ∏à ÌôïÎ≥¥ ÏµúÏ†ÅÌôî Î∞è Ìö®Ïú®ÏÑ± Í∑πÎåÄÌôî',
                    category: 'efficiency_optimization'
                });
                break;
            case 'question-mark':
                actions.push({
                    type: 'bcg_strategy',
                    priority: 'medium',
                    timeHorizon: 'medium_term',
                    description: '‚ùì ÏÑ†ÌÉùÏ†Å Ìà¨Ïûê Î∞è ÏÑ±Ïû• Ïû†Ïû¨Î†• Í≤ÄÏ¶ù',
                    category: 'selective_investment'
                });
                break;
            case 'dog':
                actions.push({
                    type: 'bcg_strategy',
                    priority: 'low',
                    timeHorizon: 'short_term',
                    description: 'üêï Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ïû¨Ï°∞Ï†ï Î∞è Ìö®Ïú®ÏÑ± Ï§ëÏã¨ Í¥ÄÎ¶¨',
                    category: 'portfolio_optimization'
                });
                break;
        }
        
        return actions;
    }

    // Ï¢ÖÌï© AI ÏΩîÎ©òÌä∏ ÏÉùÏÑ±
    generateComprehensiveComment(customer, segmentType = 'comprehensive', segment = '') {
        const profile = this.createCustomerProfile(customer);
        
        // ÏµúÏö∞ÏÑ† Ìå®ÌÑ¥ ÏÑ†ÌÉù
        const primaryPattern = profile.aiPatterns.length > 0 ? profile.aiPatterns[0] : null;
        
        // Í∏∞Î≥∏ Ï†ÑÎûµ ÏΩîÎ©òÌä∏
        let baseComment = '';
        if (primaryPattern) {
            baseComment = primaryPattern.comment(profile);
        } else {
            baseComment = this.getLifecycleBasedComment(profile);
        }
        
        // ÏÑ∏Í∑∏Î®ºÌä∏Î≥Ñ ÌäπÌôî Ï†ïÎ≥¥ Ï∂îÍ∞Ä
        const segmentInfo = this.getSegmentSpecificInfo(profile, segmentType, segment);
        
        // Ïû†Ïû¨Î†• Î∞è ÏãúÍ∞Ñ Í¥ÄÏ†ê Ï∂îÍ∞Ä
        const potentialInfo = profile.potentialScore >= 70 ? ' [Í≥†Ïû†Ïû¨Î†•]' :
                             profile.potentialScore >= 40 ? ' [Ï§ëÏû†Ïû¨Î†•]' : ' [Ï†ÄÏû†Ïû¨Î†•]';
        
        const timeHorizonInfo = primaryPattern ? 
            this.getTimeHorizonText(primaryPattern.timeHorizon) : ' (ÌëúÏ§ÄÍ¥ÄÎ¶¨)';
        
        // ÏúÑÌóò ÏàòÏ§Ä ÌëúÏãú
        const riskInfo = profile.riskLevel === 'high' ? ' ‚ö†Ô∏è' :
                        profile.riskLevel === 'medium' ? ' ‚ö°' : '';
        
        return `${baseComment}${segmentInfo}${potentialInfo}${timeHorizonInfo}${riskInfo}`;
    }

    // ÏÉùÏï†Ï£ºÍ∏∞ Í∏∞Î∞ò Í∏∞Î≥∏ ÏΩîÎ©òÌä∏
    getLifecycleBasedComment(profile) {
        const comments = {
            introduction: 'üå± ÎèÑÏûÖÍ∏∞ Í≥†Í∞ù, Í¥ÄÍ≥Ñ Íµ¨Ï∂ï Î∞è ÏÑ±Ïû• ÏßÄÏõê',
            growth: 'üìà ÏÑ±Ïû•Í∏∞ Í≥†Í∞ù, ÌôïÏû• Í∏∞Ìöå Ï†ÅÍ∑π Ìè¨Ï∞©',
            maturity: 'üíé ÏÑ±ÏàôÍ∏∞ Í≥†Í∞ù, Í∞ÄÏπò Í∑πÎåÄÌôî Î∞è Í¥ÄÍ≥Ñ Ïã¨Ìôî',
            decline: 'üìâ Ïá†Ìá¥Í∏∞ Í≥†Í∞ù, ÌöåÎ≥µ Ï†ÑÎûµ ÏàòÎ¶Ω ÌïÑÏöî',
            revival: 'üîÑ Ïû¨ÌôúÏÑ±Ìôî Í≥†Í∞ù, ÌöåÎ≥µ Î™®Î©òÌÖÄ ÏßÄÏõê',
            stable: '‚öñÔ∏è ÏïàÏ†ïÍ∏∞ Í≥†Í∞ù, Ìö®Ïú®Ï†Å Í¥ÄÍ≥Ñ Ïú†ÏßÄ'
        };
        
        return comments[profile.lifecycleStage] || 'üìä Ï¢ÖÌï© Î∂ÑÏÑù ÏôÑÎ£å, ÎßûÏ∂§ Ï†ÑÎûµ ÏàòÎ¶Ω';
    }

    // ÏÑ∏Í∑∏Î®ºÌä∏Î≥Ñ ÌäπÌôî Ï†ïÎ≥¥
    getSegmentSpecificInfo(profile, segmentType, segment) {
        if (segmentType === 'bcg' && segment) {
            const bcgInfo = {
                star: ' (Ïä§ÌÉÄÏ†ÑÎûµ)',
                'cash-cow': ' (ÏàòÏùµÏµúÏ†ÅÌôî)',
                'question-mark': ' (ÏÑ†ÌÉùÌà¨Ïûê)',
                dog: ' (Ìö®Ïú®Í¥ÄÎ¶¨)'
            };
            return bcgInfo[segment] || '';
        }
        
        if (segmentType === 'sales' && segment) {
            const salesInfo = {
                premium: ' (ÌîÑÎ¶¨ÎØ∏ÏóÑ)',
                high: ' (Ï§ëÏöîÍ≥†Í∞ù)',
                medium: ' (ÏÑ±Ïû•ÎåÄÏÉÅ)',
                low: ' (Í∏∞ÌöåÎ∞úÍµ¥)'
            };
            return salesInfo[segment] || '';
        }
        
        return '';
    }

    // ÏãúÍ∞Ñ Í¥ÄÏ†ê ÌÖçÏä§Ìä∏
    getTimeHorizonText(timeHorizon) {
        const horizonTexts = {
            immediate: ' (Ï¶âÏãúÏã§Ìñâ)',
            short_term: ' (Îã®Í∏∞ÏßëÏ§ë)',
            medium_term: ' (Ï§ëÍ∏∞Ï†ÑÎûµ)',
            long_term: ' (Ïû•Í∏∞Í¥ÄÎ¶¨)'
        };
        return horizonTexts[timeHorizon] || ' (ÌëúÏ§ÄÍ¥ÄÎ¶¨)';
    }

    // Î∞∞Ïπò ÏΩîÎ©òÌä∏ ÏÉùÏÑ±
    async generateBatchComments(customers, segmentType = 'comprehensive', segment = '') {
        const comments = [];
        const batchSize = 5;
        
        for (let i = 0; i < customers.length; i += batchSize) {
            const batch = customers.slice(i, i + batchSize);
            
            const batchComments = batch.map(customer => {
                try {
                    return this.generateComprehensiveComment(customer, segmentType, segment);
                } catch (error) {
                    console.error('ÏΩîÎ©òÌä∏ ÏÉùÏÑ± Ïò§Î•ò:', customer.accountName, error);
                    return 'üìä Î∂ÑÏÑù ÏßÑÌñâ Ï§ë, Ïû†Ïãú ÌõÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî';
                }
            });
            
            comments.push(...batchComments);
            
            // Î∞∞Ïπò Í∞Ñ ÏßÄÏó∞ (UI ÏùëÎãµÏÑ± Ïú†ÏßÄ)
            if (i + batchSize < customers.length) {
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        }
        
        return comments;
    }

    // Í≥†Í∞ù ÌîÑÎ°úÌïÑ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå
    getCustomerProfileDetails(accountCode) {
        return this.customerProfiles.get(accountCode);
    }

    // ÏÑ∏Î∂ÑÌôî Í∏∞Ï§Ä ÏóÖÎç∞Ïù¥Ìä∏
    updateSegmentationCriteria(type, criteria) {
        this.segmentationCriteria[type] = { ...this.segmentationCriteria[type], ...criteria };
    }

    // ÌÜµÍ≥Ñ Ï†ïÎ≥¥ ÏÉùÏÑ±
    generateSegmentationStats(customers) {
        const stats = {
            total: customers.length,
            byLifecycle: {},
            bySalesSegment: {},
            byBCGSegment: {},
            byRiskLevel: { high: 0, medium: 0, low: 0 },
            averagePotentialScore: 0,
            topPerformers: [],
            riskCustomers: []
        };
        
        let totalPotentialScore = 0;
        
        customers.forEach(customer => {
            const profile = this.createCustomerProfile(customer);
            
            // ÏÉùÏï†Ï£ºÍ∏∞Î≥Ñ ÌÜµÍ≥Ñ
            stats.byLifecycle[profile.lifecycleStage] = (stats.byLifecycle[profile.lifecycleStage] || 0) + 1;
            
            // Îß§Ï∂ú ÏÑ∏Í∑∏Î®ºÌä∏Î≥Ñ ÌÜµÍ≥Ñ
            stats.bySalesSegment[profile.salesSegment] = (stats.bySalesSegment[profile.salesSegment] || 0) + 1;
            
            // BCG ÏÑ∏Í∑∏Î®ºÌä∏Î≥Ñ ÌÜµÍ≥Ñ
            stats.byBCGSegment[profile.bcgSegment] = (stats.byBCGSegment[profile.bcgSegment] || 0) + 1;
            
            // ÏúÑÌóòÎèÑÎ≥Ñ ÌÜµÍ≥Ñ
            stats.byRiskLevel[profile.riskLevel]++;
            
            // Ïû†Ïû¨Î†• Ï†êÏàò ÎàÑÏ†Å
            totalPotentialScore += profile.potentialScore;
            
            // ÏÉÅÏúÑ ÏÑ±Í≥ºÏûê (Ïû†Ïû¨Î†• Ï†êÏàò 80Ï†ê Ïù¥ÏÉÅ)
            if (profile.potentialScore >= 80) {
                stats.topPerformers.push({
                    accountName: profile.accountName,
                    potentialScore: profile.potentialScore,
                    lifecycleStage: profile.lifecycleStage
                });
            }
            
            // ÏúÑÌóò Í≥†Í∞ù (Í≥†ÏúÑÌóò)
            if (profile.riskLevel === 'high') {
                stats.riskCustomers.push({
                    accountName: profile.accountName,
                    riskLevel: profile.riskLevel,
                    growth3MonthRate: Math.round(profile.growth3MonthRate)
                });
            }
        });
        
        stats.averagePotentialScore = Math.round(totalPotentialScore / customers.length);
        
        return stats;
    }
}

// Ï†ÑÏó≠ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
window.enhancedAISegmentation = new EnhancedAISegmentation();

// Í∏∞Ï°¥ Ìï®ÏàòÏôÄÏùò Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌïú ÎûòÌçº Ìï®ÏàòÎì§
window.generateLifecycleBasedComment = function(customer, segmentType, segment) {
    return window.enhancedAISegmentation.generateComprehensiveComment(customer, segmentType, segment);
};

// Ìñ•ÏÉÅÎêú ÏßÄÎä•Ìòï Í∑úÏπô Í∏∞Î∞ò ÏΩîÎ©òÌä∏ ÏÉùÏÑ± (SalesAI-main 19 Î∞©Ïãù Ï∞®Ïö©)
function generateEnhancedFallbackComment(customer, segmentType, segment) {
    const growth3Month = customer.growthVs3Month || 0;
    const growthYearAgo = customer.growthVsYearAgo || 0;
    const recentSales = customer.recentMonthSales || 0;
    
    // ÏÑ±Ïû•Î•† Í≥ÑÏÇ∞ (Î∞±Î∂ÑÏú®)
    const growth3MonthRate = customer.recentMonthSales > 0 ? 
        (growth3Month / customer.recentMonthSales) * 100 : 0;
    const growthYearAgoRate = customer.recentMonthSales > 0 ? 
        (growthYearAgo / customer.recentMonthSales) * 100 : 0;
    
    // Îß§Ï∂ú Í∑úÎ™®Î≥Ñ Î∂ÑÎ•ò
    const salesLevel = recentSales >= 100000000 ? 'premium' : 
                      recentSales >= 50000000 ? 'high' :
                      recentSales >= 10000000 ? 'medium' : 'low';
    
    // ÏÑ±Ïû• Ìå®ÌÑ¥ Î∂ÑÏÑù
    const isHighGrowth = growth3MonthRate > 20 || growthYearAgoRate > 30;
    const isGrowing = growth3Month > 0 && growthYearAgo > 0;
    const isRecovering = growth3Month > 0 && growthYearAgo <= 0;
    const isDeclining = growth3Month < 0 && growthYearAgo < 0;
    const isStagnant = Math.abs(growth3MonthRate) < 5 && Math.abs(growthYearAgoRate) < 10;
    
    // ÏÑ∏Í∑∏Î®ºÌä∏Î≥Ñ ÌäπÌôî Î∂ÑÏÑù
    let segmentInsight = '';
    if (segmentType === 'bcg') {
        switch (segment) {
            case 'star':
                segmentInsight = isHighGrowth ? 'ÏãúÏû• Î¶¨ÎçîÏã≠ ÌôïÎåÄ Í∏∞Ìöå' : 'ÏÑ±Ïû•Î•† Ï†úÍ≥† ÌïÑÏöî';
                break;
            case 'cash-cow':
                segmentInsight = isDeclining ? 'ÏàòÏùµÏÑ± Î≥¥Ìò∏ Ï†ÑÎûµ ÌïÑÏöî' : 'ÏïàÏ†ïÏ†Å ÏàòÏùµÏõê Ïú†ÏßÄ';
                break;
            case 'question-mark':
                segmentInsight = isGrowing ? 'Ìà¨Ïûê ÌôïÎåÄ Í≤ÄÌÜ†' : 'ÏãúÏû• ÏßÑÏûÖ Ï†ÑÎûµ Ïû¨Í≤ÄÌÜ†';
                break;
            case 'dog':
                segmentInsight = isRecovering ? 'ÌöåÎ≥µ Í∞ÄÎä•ÏÑ± Î™®ÎãàÌÑ∞ÎßÅ' : 'Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ïû¨Ï°∞Ï†ï Í≤ÄÌÜ†';
                break;
        }
    }
    
    // Îß§Ï∂ú Í∑úÎ™® + ÏÑ±Ïû• Ìå®ÌÑ¥ + ÏÑ∏Í∑∏Î®ºÌä∏Î≥Ñ ÎßûÏ∂§ ÏΩîÎ©òÌä∏
    if (isDeclining && recentSales > 50000000) {
        return segmentInsight || 'üö® Ï£ºÏöî Í≥†Í∞ù Ïù¥ÌÉà ÏúÑÌóò, Í∏¥Í∏â ÎåÄÏùë';
    } else if (isHighGrowth) {
        return salesLevel === 'premium' ? 
            'üåü ÏµúÏö∞ÏÑ† Í¥ÄÎ¶¨ ÎåÄÏÉÅ, ÌååÌä∏ÎÑàÏã≠ Í∞ïÌôî' :
            'üöÄ Í≥†ÏÑ±Ïû• Í≥†Í∞ù, Ìà¨Ïûê ÌôïÎåÄ Í≤ÄÌÜ†';
    } else if (isGrowing && salesLevel === 'premium') {
        return 'üíé ÌïµÏã¨ Í≥†Í∞ù, Ïû•Í∏∞ Í¥ÄÍ≥Ñ Ïã¨Ìôî';
    } else if (isRecovering) {
        return salesLevel === 'low' ? 
            'üìà ÌöåÎ≥µ ÏßïÌõÑ, Í∏∞Ìöå Ìè¨Ï∞© Ï§ÄÎπÑ' :
            'üîÑ Îß§Ï∂ú ÌöåÎ≥µ Ï§ë, Î™®Î©òÌÖÄ Ïú†ÏßÄ';
    } else if (isDeclining) {
        return salesLevel === 'low' ?
            '‚ö†Ô∏è Í¥ÄÍ≥Ñ Ïû¨Ï†êÍ≤Ä ÌïÑÏöî' :
            'üìâ ÌïòÎùΩÏÑ∏ Í¥ÄÎ¶¨, ÏõêÏù∏ Î∂ÑÏÑù ÌïÑÏöî';
    } else if (isStagnant && salesLevel === 'premium') {
        return 'üîß Ïã†Í∑ú Í∏∞Ìöå Î∞úÍµ¥, Í¥ÄÍ≥Ñ ÌôúÏÑ±Ìôî';
    } else if (isStagnant) {
        return 'ü§ù ÏïàÏ†ïÏ†Å Í¥ÄÍ≥Ñ, Ï†ïÍ∏∞ ÏÜåÌÜµ Ïú†ÏßÄ';
    } else {
        // Í∏∞Î≥∏ Ìå®ÌÑ¥ Îß§Ïπ≠
        if (recentSales > 100000000) {
            return segmentInsight || 'üíº VIP Í≥†Í∞ù, Ï†ÑÎã¥ Í¥ÄÎ¶¨ ÌïÑÏöî';
        } else if (recentSales > 50000000) {
            return segmentInsight || '‚≠ê Ï§ëÏöî Í≥†Í∞ù, Í¥ÄÍ≥Ñ Í∞ïÌôî ÌïÑÏöî';
        } else if (recentSales > 10000000) {
            return segmentInsight || 'üìä ÏÑ±Ïû• Ïû†Ïû¨Î†• ÌèâÍ∞Ä ÌïÑÏöî';
        } else {
            return segmentInsight || 'üå± Ïã†Í∑ú Í∏∞Ìöå Í∞úÎ∞ú Í≤ÄÌÜ†';
        }
    }
}

// Ï†ÑÏó≠ Ìï®ÏàòÎ°ú Îì±Î°ù
window.generateEnhancedFallbackComment = generateEnhancedFallbackComment;

window.generateBatchComments = function(customers, segmentType, segment) {
    return window.enhancedAISegmentation.generateBatchComments(customers, segmentType, segment);
};

console.log('‚úÖ Ìñ•ÏÉÅÎêú AI Í≥†Í∞ù ÏÑ∏Î∂ÑÌôî Î∞è ÏΩîÎ©òÌä∏ ÏÉùÏÑ± ÏãúÏä§ÌÖúÏù¥ Î°úÎìúÎêòÏóàÏäµÎãàÎã§.');
console.log('üìä ÏßÄÏõê Í∏∞Îä•: ÏÉùÏï†Ï£ºÍ∏∞ Î∂ÑÏÑù, BCG Matrix, Îß§Ï∂ú ÏÑ∏Î∂ÑÌôî, AI Ìå®ÌÑ¥ Îß§Ïπ≠, ÏúÑÌóòÎèÑ ÌèâÍ∞Ä, Ïû†Ïû¨Î†• Ï†êÏàò'); 